name: Automated API Tests using Postman CLI

on: push  # Runs on every push, modify as needed

jobs:
  automated-api-tests:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22  # Ensure this is compatible with your project

      # Step 3: Install Dependencies
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # Step 4: Set Environment Variables
      - name: Set environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> $GITHUB_ENV
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> $GITHUB_ENV
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SES_EMAIL=${{ secrets.AWS_SES_EMAIL }}" >> $GITHUB_ENV
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> $GITHUB_ENV

      # Step 5: Start Backend Server in Background
      - name: Start backend server
        working-directory: backend
        run: |
          nohup node server.js > server.log 2>&1 &

      # Step 6: Install Postman CLI
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      # Step 7: Login to Postman CLI
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      # Step 8: Wait for the Server to Start (Adjust Time if Needed)
      - name: Wait for server to start
        run: sleep 10  # Increase if needed

      # Step 9: Update Postman Environment with Test Cases
      - name: Update Postman Environment with Test Cases
        run: |
          ENV_FILE="test-env-updated.json"

          # Fetch current Postman environment
          curl -s -X GET "https://api.getpostman.com/environments/42768841-30686299-bc78-4b88-a224-6b2230eb2ab8" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" | \
            jq --argjson testCases "$(jq -c . < ${{ github.workspace }}/test/backend/testcases.json | jq @json)" \
            '.environment.values += [{"key": "testCases", "value": $testCases, "type": "default"}]' > $ENV_FILE

          # Debugging: Print updated environment to logs
          cat $ENV_FILE

          # Upload updated environment to Postman
          curl -s -X PUT "https://api.getpostman.com/environments/42768841-30686299-bc78-4b88-a224-6b2230eb2ab8" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @"$ENV_FILE"

      # Step 10: Run API Tests with Postman CLI
      - name: Run API tests
        run: |
          postman collection run "42768841-3b6369d7-4a8d-48b3-8ba1-813b73d0765c" \
            -e "42768841-30686299-bc78-4b88-a224-6b2230eb2ab8" 
